name: iOS Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1.0'

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.0'

    - name: Update dependencies
      run: flutter pub upgrade

    - name: Install dependencies
      run: flutter pub get

    - name: Update iOS Deployment Target
      run: |
        sed -i '' 's/platform :ios, '9.0'/platform :ios, '14.0'/' ios/Podfile
        if ! grep -q "platform :ios, '14.0'" ios/Podfile; then
          echo "platform :ios, '14.0'" >> ios/Podfile
        fi 
        xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -sdk iphoneos -configuration Release build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

    - name: Set CocoaPods Base Configuration
      run: |
        cd ios
        sed -i '' 's|FLUTTER_BUILD_MODE=release|FLUTTER_BUILD_MODE=release\n#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"|' Flutter/Release.xcconfig
        cd ..

    - name: Build iOS
      run: flutter build ios --release --no-codesign

    - name: Install CocoaPods
      run: |
        cd ios
        pod install
        cd ..

    - name: Create Gemfile and Fastfile
      run: |
        cd ios
        echo "source 'https://rubygems.org'" > Gemfile
        echo "gem 'fastlane'" >> Gemfile
        mkdir -p fastlane
        echo "default_platform(:ios)" > fastlane/Fastfile
        echo "platform :ios do" >> fastlane/Fastfile
        echo "  desc 'Deploy to TestFlight'" >> fastlane/Fastfile
        echo "  lane :beta do" >> fastlane/Fastfile
        echo "    build_app(scheme: 'Runner', export_method: 'app-store', export_options: { provisioningProfiles: { 'com.intelligentprojects.internalApp' => 'match AppStore com.intelligentprojects.internalApp' } })" >> fastlane/Fastfile
        echo "    upload_to_testflight(skip_waiting_for_build_processing: true)" >> fastlane/Fastfile
        echo "  end" >> fastlane/Fastfile
        echo "  desc 'Deploy to Firebase App Distribution'" >> fastlane/Fastfile
        echo "  lane :firebase do" >> fastlane/Fastfile
        echo "    build_app(scheme: 'Runner', export_method: 'ad-hoc', export_options: { provisioningProfiles: { 'com.intelligentprojects.internalApp' => 'match AdHoc com.intelligentprojects.internalApp' } })" >> fastlane/Fastfile
        echo "    firebase_app_distribution(app: ENV['FIREBASE_APP_ID'], testers: 'testers@example.com')" >> fastlane/Fastfile
        echo "  end" >> fastlane/Fastfile
        echo "end" >> fastlane/Fastfile
        cd ..

    - name: Set up Fastlane
      run: |
        cd ios
        bundle install
        cd ..

    - name: Deploy to TestFlight
      run: |
        cd ios
        bundle exec fastlane beta
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }} 
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }} 
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_KEYCHAIN_NAME: ${{ secrets.MATCH_KEYCHAIN_NAME }}
        MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}

    - name: Deploy to Firebase App Distribution
      if: success()
      run: |
        cd ios
        bundle exec fastlane firebase
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_KEYCHAIN_NAME: ${{ secrets.MATCH_KEYCHAIN_NAME }}
        MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}