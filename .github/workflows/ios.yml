name: iOS Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1.0'

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.0'

    - name: Update dependencies
      run: flutter pub upgrade

    - name: Install dependencies
      run: flutter pub get

    - name: Update iOS Deployment Target
      run: |
        sed -i '' 's/platform :ios, '9.0'/platform :ios, '14.0'/' ios/Podfile
        if ! grep -q "platform :ios, '14.0'" ios/Podfile; then
          echo "platform :ios, '14.0'" >> ios/Podfile
        fi 

    - name: Set CocoaPods Base Configuration
      run: |
        cd ios
        sed -i '' 's|FLUTTER_BUILD_MODE=release|FLUTTER_BUILD_MODE=release\n#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"|' Flutter/Release.xcconfig
        cd ..

    - name: Build iOS
      run: flutter build ios --release --no-codesign

    - name: Install CocoaPods
      run: |
        cd ios
        pod install
        cd ..

    - name: Install Fastlane
      run: sudo gem install fastlane

    - name: Ensure Gemfile exists
      run: |
        if [ ! -f "ios/Gemfile" ]; then
          echo "source 'https://rubygems.org'" > ios/Gemfile
          echo "gem 'fastlane'" >> ios/Gemfile
        fi

    - name: Set up Fastlane
      run: |
        cd ios
        bundle install
        cd ..
      shell: /bin/bash -e {0}
      env:
        PATH: /Users/runner/.local/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Users/runner/.cargo/bin:/usr/local/opt/curl/bin:/usr/local/bin:/usr/local/sbin:/Users/runner/bin:/Users/runner/.yarn/bin:/Users/runner/Library/Android/sdk/tools:/Users/runner/Library/Android/sdk/platform-tools:/Library/Frameworks/Python.framework/Versions/Current/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/usr/bin:/bin:/usr/sbin:/sbin:/Users/runner/.dotnet/tools
        FLUTTER_ROOT: /Users/runner/hostedtoolcache/flutter/stable-3.22.0-arm64
        PUB_CACHE: /Users/runner/.pub-cache

    - name: Download Certificates and Provisioning Profiles
      uses: actions/download-artifact@v3
      with:
        name: certificates
        path: ios/certificates

    - name: Install Certificates
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp ios/certificates/*.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        security create-keychain -p "" build.keychain
        security import ios/certificates/AppleWWDRCAG3.cer -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign
        security import ios/certificates/DistributionCertificate.p12 -k ~/Library/Keychains/build.keychain -P ${{ secrets.CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain

    - name: Create exportOptions.plist
      run: |
        cat <<EOF > ios/exportOptions.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict> 
          <key>method</key>
          <string>app-store</string>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
          <key>compileBitcode</key>
          <true/>
        </dict>
        </plist>
        EOF

    - name: Build iOS IPA
      env:
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      run: |
        flutter build ipa --release --export-options-plist=ios/exportOptions.plist

    - name: Deploy to TestFlight
      if: success()
      run: |
        xcrun altool --upload-app -f build/ios/ipa/TeamwayApp.ipa \
        -t ios --apiKey $APP_STORE_CONNECT_API_KEY --apiIssuer $APP_STORE_CONNECT_API_ISSUER

    - name: Deploy to Firebase App Distribution
      if: success()
      run: |
        cd ios
        FASTLANE_SKIP_CONFIRM=true bundle exec fastlane firebase
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}